#####
#####
# Study parameter estimability in non-parametric models#
# this is for a constant mortality constant germination model#
# with different number of time points#
#####
#####
#
# - Parameter ----#
focalParam = "p.m"#
#
# - Libraries ----#
library(MCMCvis)#
library(tidyverse)#
source("~/Dropbox/chapter-4/analysis/scripts/004_estimability/01_functionsEstimability.R")#
#
# - Functions ----#
#
# - +Generate table of parameters from simulation filenames ----#
f = function(x){#
  tmp=strsplit(x,"-")[[1]]#
  alpha=as.numeric(strsplit(tmp[2],"/")[[1]][6])#
  n.bags=as.numeric(tmp[3])#
  p.m=as.numeric(tmp[4])#
  p.g=as.numeric(sub(".RDS","",tmp[5]))#
  obj=c(alpha=alpha,n.bags=n.bags,p.m=p.m,p.g=p.g)#
  return(obj)#
}#
#
# - +Extract posterior----#
f.extract = function(file=x,params=c("lambda")){#
  samples.rjags = readRDS(file);#
  mat <- MCMCchains(samples.rjags,params=params);#
  return(mat)#
}#
#
# - Extract posteriors ----#
#
# get names of directories#
tempDirs=list.dirs("~/Dropbox/chapter-4/analysis/outputs/002_statisticalModelFitting/03_misspecification",recursive=FALSE)#
#
# construct parameter table from file names#
parm.table=data.frame(do.call(rbind,lapply(tempDirs,f)))#
#
# - +Seed bag burial experiment ----#
#
# list to hold evaluation output#
eval.list = list()#
#
# - For loop to evaluate models ----#
#
for(i in 1:dim(parm.table)[1]){#
  # - +Extract posteriors ----#
  # get current directory#
  tmp = tempDirs[i]#
  parm.table.tmp = parm.table[i,]#
  # get filenames in directories#
  fileNamesBags=list.files(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/"))#
  fileNamesAddition=list.files(paste0(tmp,"/posteriors-NpCmCg/seedAddition/"))#
  # list of all file paths for all posteriors#
  fitsBags = paste0(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/",fileNamesBags))#
  fitsAddition = paste0(paste0(tmp,"/posteriors-NpCmCg/seedAddition/",fileNamesAddition))#
  # if directory is empty (no files), go to next one#
  if(length(fitsBags)<11) next#
  # extract posteriors for mortality and germination#
  posterior.bags.all = lapply(fitsBags,f.extract,params=c("p.m","p.g"))#
  posterior.addition.all = lapply(fitsAddition,f.extract,params=c("p.m","p.g"))#
  # - +Model assessment ----#
  eval.bags = wrapper.fun(posterior.list = posterior.bags.all, par = focalParam, parm.df = parm.table.tmp)#
  eval.addition = wrapper.fun(posterior.list = posterior.addition.all, par = focalParam, parm.df = parm.table.tmp)#
  # add experiment variable#
  eval.out = rbind(data.frame(c(eval.bags,experiment="bags")),data.frame(c(eval.addition,experiment="addition")))#
  # put in list#
  eval.list[[i]] = eval.out#
}#
#
# - Bind data frame ----#
#
df = do.call("rbind", eval.list)
df
pt12 = 1
# set font sizes#
pt12 = 1#
pt10 = 10/12#
pt9 = 9/12#
pt8 = 8/12#
pt7 = 7/12#
#
# - +Basic ggplot ----#
#
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=coverage.mean,col=experiment)) + #
  facet_grid(rows=vars(p.m),cols=vars(p.g))#
#
ggplot(data = df) +#
  geom_abline(intercept=0,slope=0) +#
  geom_point(aes(x=n.bags,y=bias.mean,col=experiment)) + #
  facet_grid(p.m~p.g)#
#
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=width.mean,col=experiment)) + #
  facet_grid(p.m~p.g)#
#
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=rmse,col=experiment)) + #
  facet_grid(p.m~p.g)
facet_grid(rows=vars(p.m),cols=vars(p.g))
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=coverage.mean,col=experiment)) + #
  facet_grid(rows=vars(p.m),cols=vars(p.g))
df
ggplot(data = df) +#
  geom_abline(intercept=0,slope=0) +#
  geom_point(aes(x=n.bags,y=bias.mean,col=experiment)) + #
  facet_grid(p.m~p.g)
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=width.mean,col=experiment)) + #
  facet_grid(p.m~p.g)
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=coverage.mean,col=experiment)) + #
  facet_grid(rows=vars(p.m),cols=vars(p.g))
ggplot(data = df) +#
  geom_point(aes(x=n.bags,y=rmse,col=experiment)) + #
  facet_grid(p.m~p.g)
# - Parameter ----#
focalParam = "p.m"#
#
# - Libraries ----#
library(MCMCvis)#
library(tidyverse)#
source("~/Dropbox/chapter-4/analysis/scripts/004_estimability/01_functionsEstimability.R")#
#
# - Functions ----#
#
# - +Generate table of parameters from simulation filenames ----#
f = function(x){#
  tmp=strsplit(x,"-")[[1]]#
  alpha=as.numeric(strsplit(tmp[2],"/")[[1]][6])#
  n.bags=as.numeric(tmp[3])#
  p.m=as.numeric(tmp[4])#
  p.g=as.numeric(sub(".RDS","",tmp[5]))#
  obj=c(alpha=alpha,n.bags=n.bags,p.m=p.m,p.g=p.g)#
  return(obj)#
}#
#
# - +Extract posterior----#
f.extract = function(file=x,params=c("lambda")){#
  samples.rjags = readRDS(file);#
  mat <- MCMCchains(samples.rjags,params=params);#
  return(mat)#
}#
#
# - Extract posteriors ----#
#
# get names of directories#
tempDirs=list.dirs("~/Dropbox/chapter-4/analysis/outputs/002_statisticalModelFitting/03_misspecification",recursive=FALSE)#
#
# construct parameter table from file names#
parm.table=data.frame(do.call(rbind,lapply(tempDirs,f)))#
#
# - +Seed bag burial experiment ----#
#
# list to hold evaluation output#
eval.list = list()#
#
# - For loop to evaluate models ----#
#
for(i in 1:dim(parm.table)[1]){#
  # - +Extract posteriors ----#
  # get current directory#
  tmp = tempDirs[i]#
  parm.table.tmp = parm.table[i,]#
  # get filenames in directories#
  fileNamesBags=list.files(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/"))#
  fileNamesAddition=list.files(paste0(tmp,"/posteriors-NpCmCg/seedAddition/"))#
  # list of all file paths for all posteriors#
  fitsBags = paste0(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/",fileNamesBags))#
  fitsAddition = paste0(paste0(tmp,"/posteriors-NpCmCg/seedAddition/",fileNamesAddition))#
  # if directory is empty (no files), go to next one#
  if(length(fitsBags)<11) next#
  # extract posteriors for mortality and germination#
  posterior.bags.all = lapply(fitsBags,f.extract,params=c("p.m","p.g"))#
  posterior.addition.all = lapply(fitsAddition,f.extract,params=c("p.m","p.g"))#
  # - +Model assessment ----#
  eval.bags = wrapper.fun(posterior.list = posterior.bags.all, par = focalParam, parm.df = parm.table.tmp)#
  eval.addition = wrapper.fun(posterior.list = posterior.addition.all, par = focalParam, parm.df = parm.table.tmp)#
  # add experiment variable#
  eval.out = rbind(data.frame(c(eval.bags,experiment="bags")),data.frame(c(eval.addition,experiment="addition")))#
  # put in list#
  eval.list[[i]] = eval.out#
}#
#
# - Bind data frame ----#
#
df = do.call("rbind", eval.list)#
# - Plotting ----#
#
# set font sizes#
pt12 = 1#
pt10 = 10/12#
pt9 = 9/12#
pt8 = 8/12#
pt7 = 7/12
panels <- unique(df[,c("p.m","p.g")])
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(.85, 1),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},   #
       cex.axis = 1.25, las = 1)#
#
  abline(h = .95, col='gray50')#
  box()#
  segments(x0=df.tmp$n.bags+ c(-0.5,0.5),#
           y0=df.tmp$coverage.lo,#
           y1=df.tmp$coverage.hi)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$coverage.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Coverage", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, 1),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},   #
       cex.axis = 1.25, las = 1)#
#
  abline(h = .95, col='gray50')#
  box()#
  segments(x0=df.tmp$n.bags+ c(-0.5,0.5),#
           y0=df.tmp$coverage.lo,#
           y1=df.tmp$coverage.hi)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$coverage.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Coverage", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(-.05, .05),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},  #
       cex.axis = 1.25, las = 1)#
#
  abline(h = 0, col = "gray50")#
  box()#
  segments(x0=df.tmp$n.bags + c(-0.5,0.5),#
           y0=df.tmp$bias.mean-df.tmp$bias.ci95,#
           y1=df.tmp$bias.mean+df.tmp$bias.ci95)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$bias.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Bias", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, .4),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},       #
       cex.axis = 1.25, las = 1)#
#
  abline(h = 0, col = "gray50")#
  box()#
  segments(x0=df.tmp$n.bags + c(-0.5,0.5),#
           y0=df.tmp$width.mean-df.tmp$width.ci95,#
           y1=df.tmp$width.mean+df.tmp$width.ci95)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$width.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Width of 95% credible interval", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
# - Parameter ----#
focalParam = "p.m"#
#
# - Libraries ----#
library(MCMCvis)#
library(tidyverse)#
source("~/Dropbox/chapter-4/analysis/scripts/004_estimability/01_functionsEstimability.R")#
#
# - Functions ----#
#
# - +Generate table of parameters from simulation filenames ----#
f = function(x){#
  tmp=strsplit(x,"-")[[1]]#
  alpha=as.numeric(strsplit(tmp[2],"/")[[1]][6])#
  n.bags=as.numeric(tmp[3])#
  p.m=as.numeric(tmp[4])#
  p.g=as.numeric(sub(".RDS","",tmp[5]))#
  obj=c(alpha=alpha,n.bags=n.bags,p.m=p.m,p.g=p.g)#
  return(obj)#
}#
#
# - +Extract posterior----#
f.extract = function(file=x,params=c("lambda")){#
  samples.rjags = readRDS(file);#
  mat <- MCMCchains(samples.rjags,params=params);#
  return(mat)#
}#
#
# - Extract posteriors ----#
#
# get names of directories#
tempDirs=list.dirs("~/Dropbox/chapter-4/analysis/outputs/002_statisticalModelFitting/03_misspecification",recursive=FALSE)#
#
# construct parameter table from file names#
parm.table=data.frame(do.call(rbind,lapply(tempDirs,f)))#
#
# - +Seed bag burial experiment ----#
#
# list to hold evaluation output#
eval.list = list()#
#
# - For loop to evaluate models ----#
#
for(i in 1:dim(parm.table)[1]){#
  # - +Extract posteriors ----#
  # get current directory#
  tmp = tempDirs[i]#
  parm.table.tmp = parm.table[i,]#
  # get filenames in directories#
  fileNamesBags=list.files(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/"))#
  fileNamesAddition=list.files(paste0(tmp,"/posteriors-NpCmCg/seedAddition/"))#
  # list of all file paths for all posteriors#
  fitsBags = paste0(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/",fileNamesBags))#
  fitsAddition = paste0(paste0(tmp,"/posteriors-NpCmCg/seedAddition/",fileNamesAddition))#
  # if directory is empty (no files), go to next one#
  if(length(fitsBags)<11) next#
  # extract posteriors for mortality and germination#
  posterior.bags.all = lapply(fitsBags,f.extract,params=c("p.m","p.g"))#
  posterior.addition.all = lapply(fitsAddition,f.extract,params=c("p.m","p.g"))#
  # - +Model assessment ----#
  eval.bags = wrapper.fun(posterior.list = posterior.bags.all, par = focalParam, parm.df = parm.table.tmp)#
  eval.addition = wrapper.fun(posterior.list = posterior.addition.all, par = focalParam, parm.df = parm.table.tmp)#
  # add experiment variable#
  eval.out = rbind(data.frame(c(eval.bags,experiment="bags")),data.frame(c(eval.addition,experiment="addition")))#
  # put in list#
  eval.list[[i]] = eval.out#
}#
#
# - Bind data frame ----#
#
df = do.call("rbind", eval.list)#
# - Plotting ----#
#
# set font sizes#
pt12 = 1#
pt10 = 10/12#
pt9 = 9/12#
pt8 = 8/12#
pt7 = 7/12
panels <- unique(df[,c("p.m","p.g")])#
#pdf(paste0("~/Dropbox/chapter-4/analysis/products/figures/summary-",focalParam,".pdf"),height=10,width=10)#
#
# - ++Coverage ----#
#
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, 1),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},   #
       cex.axis = 1.25, las = 1)#
#
  abline(h = .95, col='gray50')#
  box()#
  segments(x0=df.tmp$n.bags+ c(-0.5,0.5),#
           y0=df.tmp$coverage.lo,#
           y1=df.tmp$coverage.hi)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$coverage.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Coverage", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
# - Parameter ----#
focalParam = "p.m"#
#
# - Libraries ----#
library(MCMCvis)#
library(tidyverse)#
source("~/Dropbox/chapter-4/analysis/scripts/004_estimability/01_functionsEstimability.R")#
#
# - Functions ----#
#
# - +Generate table of parameters from simulation filenames ----#
f = function(x){#
  tmp=strsplit(x,"-")[[1]]#
  alpha=as.numeric(strsplit(tmp[2],"/")[[1]][6])#
  n.bags=as.numeric(tmp[3])#
  p.m=as.numeric(tmp[4])#
  p.g=as.numeric(sub(".RDS","",tmp[5]))#
  obj=c(alpha=alpha,n.bags=n.bags,p.m=p.m,p.g=p.g)#
  return(obj)#
}#
#
# - +Extract posterior----#
f.extract = function(file=x,params=c("lambda")){#
  samples.rjags = readRDS(file);#
  mat <- MCMCchains(samples.rjags,params=params);#
  return(mat)#
}#
#
# - Extract posteriors ----#
#
# get names of directories#
tempDirs=list.dirs("~/Dropbox/chapter-4/analysis/outputs/002_statisticalModelFitting/03_misspecification",recursive=FALSE)#
#
# construct parameter table from file names#
parm.table=data.frame(do.call(rbind,lapply(tempDirs,f)))#
#
# - +Seed bag burial experiment ----#
#
# list to hold evaluation output#
eval.list = list()
# - Parameter ----#
focalParam = "p.g"#
#
# - Libraries ----#
library(MCMCvis)#
library(tidyverse)#
source("~/Dropbox/chapter-4/analysis/scripts/004_estimability/01_functionsEstimability.R")#
#
# - Functions ----#
#
# - +Generate table of parameters from simulation filenames ----#
f = function(x){#
  tmp=strsplit(x,"-")[[1]]#
  alpha=as.numeric(strsplit(tmp[2],"/")[[1]][6])#
  n.bags=as.numeric(tmp[3])#
  p.m=as.numeric(tmp[4])#
  p.g=as.numeric(sub(".RDS","",tmp[5]))#
  obj=c(alpha=alpha,n.bags=n.bags,p.m=p.m,p.g=p.g)#
  return(obj)#
}#
#
# - +Extract posterior----#
f.extract = function(file=x,params=c("lambda")){#
  samples.rjags = readRDS(file);#
  mat <- MCMCchains(samples.rjags,params=params);#
  return(mat)#
}#
#
# - Extract posteriors ----#
#
# get names of directories#
tempDirs=list.dirs("~/Dropbox/chapter-4/analysis/outputs/002_statisticalModelFitting/03_misspecification",recursive=FALSE)#
#
# construct parameter table from file names#
parm.table=data.frame(do.call(rbind,lapply(tempDirs,f)))#
#
# - +Seed bag burial experiment ----#
#
# list to hold evaluation output#
eval.list = list()#
#
# - For loop to evaluate models ----#
#
for(i in 1:dim(parm.table)[1]){#
  # - +Extract posteriors ----#
  # get current directory#
  tmp = tempDirs[i]#
  parm.table.tmp = parm.table[i,]#
  # get filenames in directories#
  fileNamesBags=list.files(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/"))#
  fileNamesAddition=list.files(paste0(tmp,"/posteriors-NpCmCg/seedAddition/"))#
  # list of all file paths for all posteriors#
  fitsBags = paste0(paste0(tmp,"/posteriors-NpCmCg/seedBagBurial/",fileNamesBags))#
  fitsAddition = paste0(paste0(tmp,"/posteriors-NpCmCg/seedAddition/",fileNamesAddition))#
  # if directory is empty (no files), go to next one#
  if(length(fitsBags)<11) next#
  # extract posteriors for mortality and germination#
  posterior.bags.all = lapply(fitsBags,f.extract,params=c("p.m","p.g"))#
  posterior.addition.all = lapply(fitsAddition,f.extract,params=c("p.m","p.g"))#
  # - +Model assessment ----#
  eval.bags = wrapper.fun(posterior.list = posterior.bags.all, par = focalParam, parm.df = parm.table.tmp)#
  eval.addition = wrapper.fun(posterior.list = posterior.addition.all, par = focalParam, parm.df = parm.table.tmp)#
  # add experiment variable#
  eval.out = rbind(data.frame(c(eval.bags,experiment="bags")),data.frame(c(eval.addition,experiment="addition")))#
  # put in list#
  eval.list[[i]] = eval.out#
}#
#
# - Bind data frame ----#
#
df = do.call("rbind", eval.list)#
# - Plotting ----#
#
# set font sizes#
pt12 = 1#
pt10 = 10/12#
pt9 = 9/12#
pt8 = 8/12#
pt7 = 7/12
panels <- unique(df[,c("p.m","p.g")])#
#pdf(paste0("~/Dropbox/chapter-4/analysis/products/figures/summary-",focalParam,".pdf"),height=10,width=10)#
#
# - ++Coverage ----#
#
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, 1),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},   #
       cex.axis = 1.25, las = 1)#
#
  abline(h = .95, col='gray50')#
  box()#
  segments(x0=df.tmp$n.bags+ c(-0.5,0.5),#
           y0=df.tmp$coverage.lo,#
           y1=df.tmp$coverage.hi)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$coverage.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Coverage", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(-.05, .05),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},  #
       cex.axis = 1.25, las = 1)#
#
  abline(h = 0, col = "gray50")#
  box()#
  segments(x0=df.tmp$n.bags + c(-0.5,0.5),#
           y0=df.tmp$bias.mean-df.tmp$bias.ci95,#
           y1=df.tmp$bias.mean+df.tmp$bias.ci95)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$bias.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Bias", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, .4),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'},       #
       cex.axis = 1.25, las = 1)#
#
  abline(h = 0, col = "gray50")#
  box()#
  segments(x0=df.tmp$n.bags + c(-0.5,0.5),#
           y0=df.tmp$width.mean-df.tmp$width.ci95,#
           y1=df.tmp$width.mean+df.tmp$width.ci95)#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$width.mean ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.25, "Width of 95% credible interval", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
par(mfrow = c(2,2),#
    oma = c(5,6,1,1) + 0.1,#
    mar = c(0,0,1,1.25) + 0.1)#
#
for(i in 1:dim(panels)[1]){#
  # get data for panel#
  df.tmp <- df %>% dplyr::filter(p.m==panels$p.m[i] & p.g==panels$p.g[i])#
  plot(NA,#
       xlim=c(0,32), ylim = c(0, .025),#
       ylab='',#
       xlab="",#
       yaxt=if(i==2|i==4){'n'},#
       xaxt=if(i==1|i==2){'n'}, #
       cex.axis = 1.25, las = 1)#
  abline(h = 0, col = "gray50")#
  box()#
  points(x= df.tmp$n.bags+ c(-0.5,0.5), y = df.tmp$rmse ,#
         pch=ifelse(df.tmp$experiment=="bags",21,21),#
         bg=ifelse(df.tmp$experiment=="bags","black","white"))#
  if(i==2|i==4){#
    mtext(side=4, line =.5,paste0("P(mortality)=",df.tmp$p.m[1]), cex = 1.5 )#
  }#
  if(i==1|i==2){#
    mtext(side=3, line =.5,paste0("P(germination)=",df.tmp$p.g[1]), cex = 1.5 )#
  }#
  if(i==1|i==3){#
    mtext(side=2, line = 3.75, "Root mean squared error", cex = 1.5)#
  }#
  if(i==3|i==4){#
    mtext(side=1, line = 3.25, "Number of samples (bags or plots)", cex = 1.5)#
  }#
}
posterior.bags.all
parm.table
lapply(posterior.bags.all,quantile,2,.5)
lapply(posterior.bags.all,quantile,.5)
lapply(posterior.bags.all,function(x),quantile(x[,1],.5))
lapply(posterior.bags.all,function(x), x[,1])
lapply(posterior.bags.all,function(x) x[,1])
lapply(posterior.bags.all,function(x) quantile(x[,1],.5))
lapply(posterior.bags.all,function(x) quantile(x[,2],.5))
unlist(lapply(posterior.bags.all,function(x) quantile(x[,2],.5)))
hist(unlist(lapply(posterior.bags.all,function(x) quantile(x[,2],.5))))
hist(unlist(lapply(posterior.addition.all,function(x) quantile(x[,2],.5))))
